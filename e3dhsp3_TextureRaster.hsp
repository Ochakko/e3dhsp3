;　３Ｄ画面をテクスチャにコピーし、テクスチャをラスタースクロールして、画面一杯に表示するサンプルです。
;　　
;　デフォルト状態では、リアルタイムの３Ｄ画面で、
;　１キーを押すと、ラスタースクロール表示になり、
;　2キーを押すと、リアルタイム３Ｄ画面に戻ります。
;　3キーを押すと、色の反転表示（静止画）になります。
;
;　表示の切り替えは、displayflagの値で、切り替えます。
;　ChangeDisplayFlag で、切り替え処理を行います。
;　
;　このサンプルは、e3dhsp_autorun.asを加工したものです。
;　サンプルの大半は、たこの自動走行用のスクリプトで、
;　ラスタースクロール処理部分は、非常に簡単な作りになっています。
;

#include "e3dhsp3.as"

#module
#deffunc waitbyfps int p1, var fps
	E3DWaitbyFPS@ p1, fps
	await 0
	return
#global

	
	dim keybuf, 256	

	;file のpath 用のバッファーの作成
	pathlen = 2048
	sdim mediadir, pathlen
	mediadir = dir_cur + "\\Media"
	sdim pathbuf, pathlen, 4
	

	mapsize = 150000.0
	mapdiv = 50

	mapheight = 10000.0


	screenw = 512 : screenh = 512
	screen 0, screenw, screenh, 1
	pointmax = 100

	title "Texture RasterScroll"

	;初期化
	E3DEnableDbgFile
	E3DInit 0, -1, 0, 16, 0, scid1

	;カメラの初期化
	camposx = 0.0 : camposy = 2500.0 : camposz = 0.0
	E3DSetCameraPos camposx, camposy, camposz	
	camdegxz = 180.0 : camdegy = 0.0
	E3DSetCameraDeg camdegxz, camdegy

	confflag = 0
	endflag = 0


	;projectionの変更をしたいときは、以下の２行を有効にしてください。
	proj_near = 100.0 : proj_far = 50000.0 : proj_fov = 60.0
	E3DSetProjection proj_near, proj_far, proj_fov


	E3DCreateProgressBar
	E3DSetProgressBar 30

	
	; 地面データのロード

	pathbuf.0 = mediadir + "\\test_course_01.mqo"
	E3DLoadMQOFileAsGround pathbuf.0, 100.0, hsid0
	E3DSetPos hsid0, 0.0, 0.0, 0.0	
	frameno0 = 0

	E3DSetProgressBar 60
	
	
	; たこの読み込み	
	pathbuf.0 = mediadir + "\\tako.sig"
	pathbuf.1 = mediadir + "\\tako_idling.qua"
	pathbuf.2 = mediadir + "\\tako_run.qua"
	E3DSigLoad pathbuf.0, hsid4
	E3DAddMotion hsid4, pathbuf.1, mk4_idling, max4_idling				
	E3DAddMotion hsid4, pathbuf.2, mk4_run, max4_run

	E3DSetMotionKind hsid4, mk4_run

	posx4 = 117424.0 : posy4 = 7000.0 : posz4 = 44745.0	
	degx4 = 0.0 : degy4 = 162.0 : degz4 = 0.0
	E3DSetPos hsid4, posx4, posy4, posz4
	E3DSetDir hsid4, degx4, degy4, degz4
	frameno4 = 0
	newmk4 = 0
	curposx4 = posx4 : curposy4 = posy4 : curposz4 = posz4
	E3DSetBeforePos hsid4

	; 走行ラインの読み込み
	gosub *LoadNaviLine ;　別ファイル、naviline0.as の関数です。

;/////////////////	
	
	testfps = 0

	lightdirx1 = 0.0
	lightdiry1 = -1.0
	lightdirz1 = 2.0
	lightr1 = 255
	lightg1 = 255
	lightb1 = 255

	E3DCreateLight lid1
	E3DSetDirectionalLight lid1, lightdirx1, lightdiry1, lightdirz1, lightr1, lightg1, lightb1

	chkfps1 = 0

	pathbuf.0 = mediadir + "\\lake.bmp"
	pathbuf.1 = mediadir + "\\cloud3.bmp"
	E3DCreateBG scid1, pathbuf.0, pathbuf.1, 0.001, 0.0, 0

	E3DDestroyProgressBar

	pbflag = 0;

	result0 = 0
	adjustx0 = 0.0 : adjusty0 = 0.0 : adjustz0 = 0.0
	befposx = posx4 : befposy = posy4 : befposz = posz4


	dim arfps, 50

	maxfps = 60
	befshiftF = 0
	curshiftF = 0

	turboflag = 0

	targetpid4 = 0
	movestep = 200

////////////////////
	displayflag = 0 //0のとき、たこ表示：１のとき、テクスチャーをラスタスクロールして表示

	texid1 = -1
	texid2 = -1


*main
	; keybuf変数は、メインループの外で、dim keybuf, 256 として、確保しておいてください。
	E3DGetKeyboardState keybuf

	if keybuf.VK_ESCAPE = 1 : goto *bye ; [ESC]で終了

	gosub *ChangeDisplayFlag

	if( displayflag == 0 ){ 
		gosub *CheckTurbo
		gosub *ChangeFPS

		gosub *MoveChara2
		gosub *MoveCamera2


		E3DSetNewPose hsid4, frameno4


		E3DBeginScene scid1
	

		E3DChkInView scid1, hsid0
		E3DChkInView scid1, hsid4

		gosub *ChkConf ; !!! E3DChkInViewより後で呼んでください。


			;不透明部分の描画をする
		E3DRender scid1, hsid0, 0, frameno0, 0
		E3DRender scid1, hsid4, 0, frameno4, 0

			;半透明部分の描画をする
		E3DRender scid1, hsid0, 1, frameno0, 0, 0, 0, 1
		E3DRender scid1, hsid4, 1, frameno4, 0, 0, 0, 1

		gosub *DrawText


		E3DEndScene

		E3DPresent scid1
	} else {
		if( displayflag == 1 ){
	
			E3DRasterScrollTexture texid1, texid2, t, 0.5, 50.0
			t++

			E3DBeginScene scid1;これは、画面のクリアのために呼ぶ。
			E3DEndScene
		
			E3DCopyTextureToBackBuffer texid2
			;ビデオカードによっては、E3DCopyTextureToBackBufferを、E3DBeginSceneとE3DEndSceneの間にいれると、良くないそうです。
			;これを避けるために、E3DBeginSceneより前で、この関数を呼び出し、
			;E3DBeginSceneに引数１を渡して、背景描画や画面クリアーが行われないようにします。		


			E3DBeginScene scid1, 1
				gosub *DrawText2
			E3DEndScene
			E3DPresent scid1
		}else{

			E3DBeginScene scid1;これは、画面のクリアのために呼ぶ。
			E3DEndScene

		
			E3DCopyTextureToBackBuffer texid1
			;ビデオカードによっては、E3DCopyTextureToBackBufferを、E3DBeginSceneとE3DEndSceneの間にいれると、良くないそうです。
			;これを避けるために、E3DBeginSceneより前で、この関数を呼び出し、
			;E3DBeginSceneに引数１を渡して、背景描画や画面クリアーが行われないようにします。		

			E3DBeginScene scid1, 1
				gosub *DrawText3
			E3DEndScene
			E3DPresent scid1
			
		}		
	}
		
	waitbyfps maxfps, chkfps1

	arno = 0
	repeat 49
		befno = 48 - arno
		aftno = 49 - arno
		arfps.aftno = arfps.befno
		arno++
	loop	
	arfps.0 = chkfps1

	
	E3DGetPos hsid4, posx4, posy4, posz4
	E3DSetBeforePos hsid4
	befposx = posx4 : befposy = posy4 : befposz = posz4

	goto *main

#include "naviline0.as"

*bye
	E3DBye
	end

*MoveChara2
	dummytpid = -1

	
	E3DControlByNaviLine hsid4, nlid0, 5, 1, 0, 1000, movestep, 200, ctrlx4, ctrly4, ctrlz4, ctrlqx4, ctrlqy4, ctrlqz4, ctrlqw4, targetpid4
	;E3DControlByNaviLine hsid4, nlid0, 5, 1, 0, 1000, movestep, 200, ctrlx4, ctrly4, ctrlz4, ctrlqx4, ctrlqy4, ctrlqz4, ctrlqw4, dummytpid
	
	;E3DControlByNaviLine hsid4, nlid0, 4, 1, 0, 4000, movestep, 100, ctrlx4, ctrly4, ctrlz4, ctrlqx4, ctrlqy4, ctrlqz4, ctrlqw4, targetpid4
	;E3DControlByNaviLine hsid4, nlid0, 4, 1, 0, 4000, movestep, 40, ctrlx4, ctrly4, ctrlz4, ctrlqx4, ctrlqy4, ctrlqz4, ctrlqw4, dummytpid

	posx4 = ctrlx4 : posy4 = ctrly4 : posz4 = ctrlz4
	E3DSetPos hsid4, posx4, posy4, posz4
	E3DSetDirQ hsid4, ctrlqx4, ctrlqy4, ctrlqz4, ctrlqw4

	
	return

*ChkConf
	result0 = 0

	; 地面その１と、キャラクタのあたり判定	
	E3DChkConfGround hsid4, hsid0, 1, 200.0, -100.0, result0, adjustx0, adjusty0, adjustz0, nx0, ny0, nz0
	if ( result0 != 0 ) {
		posx4 = adjustx0 : posy4 = adjusty0 : posz4 = adjustz0
		E3DSetPos hsid4, posx4, posy4, posz4		
	}	

	return


*MoveCamera2
	E3DGetPos hsid4, saveposx4, saveposy4, saveposz4
	E3DGetDirQ hsid4, saveqx4, saveqy4, saveqz4, saveqw4

	E3DRotateInit hsid4
	E3DRotateY hsid4, 180.0

	E3DPosForward hsid4, -2500.0
	E3DGetPos hsid4, backposx, backposy, backposz

	E3DSetPos hsid4, saveposx4, saveposy4, saveposz4
	E3DSetDirQ hsid4, saveqx4, saveqy4, saveqz4, saveqw4			


	E3DChkConfGround2 backposx, mapheight, backposz, backposx, -100.0, backposz, hsid0, 0, 200.0, 0, resultc, adjustxc, adjustyc, adjustzc, nxc, nyc, nzc
	if ( resultc = 0 ) {
		backposy = 1500.0
	}
	else {
		backposy = adjustyc + 1500.0
	} 	
	E3DSetCameraPos backposx, backposy, backposz
	E3DSetCameraTarget saveposx4, saveposy4 + 800.0, saveposz4, 0.0, 1.0, 0.0

	return


*CheckTurbo
	if ( keybuf.'T' = 1 ) {
		if ( turboflag = 0 ) {
			E3DSetMotionStep hsid4, mk4_idling, 2
			E3DSetMotionStep hsid4, mk4_run, 2		
			turboflag = 1
			movestep = 400.0
		}
	}
	else {
		if( turboflag = 1 ) {
			E3DSetMotionStep hsid4, mk4_idling, 1
			E3DSetMotionStep hsid4, mk4_run, 1		
			turboflag = 0
			movestep = 200.0
		}
	}

	return

*ChangeFPS

	curshiftF = 0
	if ( (keybuf.VK_SHIFT = 1) & (keybuf.'F' = 1) ) {
		curshiftF = 1
	}

	if ( ( curshiftF = 0 ) & ( befshiftF = 1 ) ) {
		if ( maxfps = 60 ) {
			maxfps = 500
		}
		else {
			maxfps = 60
		} 
	}

	befshiftF = curshiftF

	return

*DrawText
	sdim strchk2, 1024
	textr = 0 : textg = 255 : textb = 0
	textscale = 1

	lcnt = 0
	avfps = 0
	repeat 50
		avfps += arfps.lcnt
		lcnt++
	loop
	avfps = avfps / 50

	textposx = 10 : textposy = 20
	strchk2 = "avfps   " + avfps
	E3DDrawText textposx, textposy, textscale, textr, textg, textb, strchk2

	textposy += 40
	strchk2 = "press 1 key --> RasterScroll , 2 key --> 3D, 3 key --> Inverse Color"
	E3DDrawText textposx, textposy, textscale, textr, textg, textb, strchk2
	
	return

*DrawText2
	sdim strchk2, 1024

	textr = 0 : textg = 255 : textb = 255
	textscale = 1

	lcnt = 0
	avfps = 0
	repeat 50
		avfps += arfps.lcnt
		lcnt++
	loop
	avfps = avfps / 50

	textposx = 10 : textposy = 350

	strchk2 = "RasterScroll Texture"
	E3DDrawText textposx, textposy, textscale, textr, textg, textb, strchk2

	textposy += 20
	strchk2 = "avfps   " + avfps
	E3DDrawText textposx, textposy, textscale, textr, textg, textb, strchk2


	return

*DrawText3
	sdim strchk2, 1024

	textr = 0 : textg = 255 : textb = 255
	textscale = 1

	lcnt = 0
	avfps = 0
	repeat 50
		avfps += arfps.lcnt
		lcnt++
	loop
	avfps = avfps / 50

	textposx = 10 : textposy = 350

	strchk2 = "Inverse Color Texture"
	E3DDrawText textposx, textposy, textscale, textr, textg, textb, strchk2

	textposy += 20
	strchk2 = "avfps   " + avfps
	E3DDrawText textposx, textposy, textscale, textr, textg, textb, strchk2


	return


*ChangeDisplayFlag

	if( keybuf.'1' == 1 ){
		if( displayflag != 1 ){

			;ラスター表示に切り替える。

			displayflag = 1

			;displayflag １に変わるたびに、テクスチャーを作成します。
			;これを繰り返すと、使われないテクスチャーの量が、膨大になるので、
			;以前に作成したテクスチャーを、ここで、破棄します。
			if( texid1 >= 0 ){
				E3DDestroyTexture texid1
				texid1 = -1
			}
			if( texid2 >= 0 ){
				E3DDestroyTexture texid2
				texid2 = -1
			}


			E3DCreateTexture "MainWindow", D3DPOOL_SYSTEMMEM, 0, texid1 ;ラスタースクロール前のテクスチャ
			E3DCreateTexture "MainWindow", D3DPOOL_SYSTEMMEM, 0, texid2 ;ラスタースクロール結果格納用テクスチャ
	
		}
	}

	if( keybuf.'2' == 1 ){
		if( displayflag != 0 ){

			;３Ｄ表示に切り替える。

			displayflag = 0			

		}	
	}

	if( keybuf.'3' == 1 ){
		if( displayflag != 2 ){
			;色反転表示（静止画）に切り替える

			displayflag = 2

			;displayflag 2に変わるたびに、テクスチャーを作成します。
			;これを繰り返すと、使われないテクスチャーの量が、膨大になるので、
			;以前に作成したテクスチャーを、ここで、破棄します。
			if( texid1 >= 0 ){
				E3DDestroyTexture texid1
				texid1 = -1
			}
			if( texid2 >= 0 ){
				E3DDestroyTexture texid2
				texid2 = -1
			}

			E3DCreateTexture "MainWindow", D3DPOOL_SYSTEMMEM, 0, texid1 ;色反転用のテクスチャ
			E3DInvColTexture texid1
		}
	}


	return

